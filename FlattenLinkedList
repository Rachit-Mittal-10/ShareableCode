#include<bits/stdc++.h>
using namespace std;
class Node {
  public:
        int data;
        Node *next;
       Node *child;
        Node() : data(0), next(nullptr), child(nullptr){};
        Node(int x) : data(x), next(nullptr), child(nullptr) {}
        Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 };
Node* Merge(Node* first, Node* second){
    if(first==NULL && second==NULL){
        return NULL;
    }
    if(first!=NULL && second==NULL){
        return first;
    }
    if(first==NULL && second!=NULL){
        return second;
    }
    Node* headSorted = NULL;
    if(first->data<=second->data){
        headSorted = first;
        first = first->child;
    }else{
        headSorted = second;
        second = second->child;
    }
    Node* temp = headSorted;
    while(first!=NULL && second!=NULL){
        if(first->data <= second->data){
            temp->child = first;
            temp = first;
            first = first->child;
        }else{
            temp->child = second;
            temp = second;
            second = second->child;
        }
    }
    if(first!=NULL){
        temp->child = first;
    }
    if(second!=NULL){
        temp->child = second;
    }
    return headSorted;
}

Node* flattenLinkedList(Node* head) 
{
    // Write your code here
    if(head == NULL || head->next == NULL){
        return head;
    }

    Node* down = head;
    Node* temp = head->next;
    down->next = NULL;
    Node* right = flattenLinkedList(temp);
    right = Merge(down,right);
    return right;
}

int main() {
  Node* e1 = new Node(4);
  Node* e2 = new Node(6);
  e1->child = e2;
  
  Node* a1 = new Node(5);
  Node* a2 = new Node(71);
  a1->child = a2;
  
  Node* b1 = new Node(7);
  Node* b2 = new Node(8);
  Node* b3 = new Node(9);
  b1->child = b2;
  b2->child = b3;
  
  Node* c1 = new Node(11);
  Node* c2 = new Node(12);
  Node* c3 = new Node(19);
  c1->child = c2;
  c2->child = c3;
  
  Node* d1 = new Node(14);
  Node* d2 = new Node(15);
  Node* d3 = new Node(17);
  d1->child = d2;
  d2->child = d3;
  
  e1->next = a1;
  a1->next = b1;
  b1->next = c1;
  c1->next = d1;
  
  Node* h1 = e1;
  Node* h2 = flattenLinkedList(h1);
  Node* temp = h2;

  while(temp!=NULL){
    cout << temp->data << " ";
    temp = temp->child;
  }
  cout << endl;
  return 0;
}
